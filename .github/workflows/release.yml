# The way this works is the following:
#
# The create-release job runs purely to initialize the GitHub release itself.
#
# The build-man-page job runs once create-release is finished.
# It builds the man page and attaches it as a release asset to the previously
# created release.
#
# The build-release job runs only once build-man-page is finished. It downloads
# the man page, then builds the release executables for each supported platform
# and attaches them to the previously created release.
#
# The key here is that we create the release and man page only once.
#
# Reference:
# https://eugene-babichenko.github.io/blog/2020/05/09/github-actions-cross-platform-auto-releases/
# Adjusted from: https://github.com/BurntSushi/ripgrep/blob/df83b8b44426b3f2179/.github/workflows/release.yml

name: release
on:
  push:
    # Enable when testing release infrastructure on a branch + set a GA_VERSION a few lines below
    # branches:
    # -  release-twiddling
    tags:
      - "[0-9]+.[0-9]+.[0-9]+"
jobs:
  create-release:
    name: create-release
    runs-on: ubuntu-latest
    # env:
      # Set to force version number, e.g., when no tag exists.
      # GA_VERSION: TEST-0.6.8
    outputs:
      upload_url: ${{ steps.release.outputs.upload_url }}
      GA_VERSION: ${{ env.GA_VERSION }}
    steps:
      - name: Get the release version from the tag
        shell: bash
        if: env.GA_VERSION == ''
        run: |
          # Apparently, this is the right way to get a tag name. Really?
          #
          # See: https://github.community/t5/GitHub-Actions/How-to-get-just-the-tag-name/m-p/32167/highlight/true#M1027
          echo "GA_VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
          echo "version is: ${{ env.GA_VERSION }}"
      - name: Create GitHub release
        # Todo: Generate a nice changelog using https://github.com/softprops/action-gh-release
        id: release
        uses: softprops/action-gh-release@v2
        with:
          name: ${{ env.GA_VERSION }}
          tag_name: ${{ env.GA_VERSION }}

  build-man-page:
    name: build-man-page
    needs: ['create-release']
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup environment
        run: |
          sudo apt-get update
          sudo apt-get --assume-yes --no-install-recommends install asciidoc
      - name: Build from asciidoc
        env:
          GA_VERSION: ${{ needs.create-release.outputs.GA_VERSION }}
        working-directory: ./Documentation
        run: make
      - name: Upload man page as artifact
        uses: actions/upload-artifact@v4
        with:
          path: Documentation/git-absorb.1
          name: git-absorb.1
      - name: Attach man page to release
        uses: softprops/action-gh-release@v2
        with:
          name: ${{ needs.create-release.outputs.GA_VERSION }}
          files: Documentation/git-absorb.1

  build-release:
    name: build-release
    needs: ['create-release', 'build-man-page']
    runs-on: ${{ matrix.os }}
    env:
      # Emit backtraces on panics.
      RUST_BACKTRACE: 1
    strategy:
      matrix:
        build: [linux, linux-arm, macos, win-msvc, win-gnu]
        include:
          # cross doesn't support the darwin/msvc targets unless you build their dockerfiles locally, due to licensing issues
          # https://github.com/cross-rs/cross-toolchains
          # so we only use it for the linux targets that require other architectures/libcs
          - build: linux
            os: ubuntu-latest
            toolchain: nightly
            target: x86_64-unknown-linux-musl
            cross: true
          - build: linux-arm
            os: ubuntu-latest
            toolchain: nightly
            target: arm-unknown-linux-gnueabihf
            cross: true
          - build: macos
            os: macos-latest
            toolchain: nightly
            target: x86_64-apple-darwin
            cross: false
          - build: win-msvc
            os: windows-latest
            toolchain: nightly
            target: x86_64-pc-windows-msvc
            cross: false
          - build: win-gnu
            os: windows-latest
            toolchain: nightly-x86_64-gnu
            target: x86_64-pc-windows-gnu
            cross: false

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ matrix.toolchain }}
          target: ${{ matrix.target }}

      - name: Build release binary
        uses: clechasseur/rs-cargo@v2
        with:
          use-cross: ${{ matrix.cross }}
          command: build
          args: --release --verbose --target ${{ matrix.target }}

      - name: Strip release binary (linux and macos)
        if: matrix.build == 'linux' || matrix.build == 'macos'
        run: strip "target/${{ matrix.target }}/release/git-absorb"

      - name: Strip release binary (linux-arm)
        if: matrix.build == 'linux-arm'
        run: |
          docker run --rm -v \
            "$PWD/target:/target:Z" \
            rustembedded/cross:arm-unknown-linux-gnueabihf \
            arm-linux-gnueabihf-strip \
            /target/arm-unknown-linux-gnueabihf/release/git-absorb

      - name: Download man page
        uses: actions/download-artifact@v4
        with:
          name: git-absorb.1
          path: Documentation

      - name: Build archive
        shell: bash
        run: |
          outdir="./target/${{ matrix.target }}/release"
          staging="git-absorb-${{ needs.create-release.outputs.GA_VERSION }}-${{ matrix.target }}"
          mkdir -p "$staging"/doc

          cp {README.md,LICENSE.md} "$staging/"
          cp Documentation/{git-absorb.1,git-absorb.adoc} "$staging/doc/"

          if [[ "${{ matrix.target }}" =~ .*windows.* ]]; then
            cp "target/${{ matrix.target }}/release/git-absorb.exe" "$staging/"
            7z a "$staging.zip" "$staging"
            echo "ASSET=$staging.zip" >> $GITHUB_ENV
          else
            cp "target/${{ matrix.target }}/release/git-absorb" "$staging/"
            tar czf "$staging.tar.gz" "$staging"
            echo "ASSET=$staging.tar.gz" >> $GITHUB_ENV
          fi

      - name: Upload release archive
        uses: softprops/action-gh-release@v2
        with:
          name: ${{ needs.create-release.outputs.GA_VERSION }}
          files: ${{ env.ASSET }}
